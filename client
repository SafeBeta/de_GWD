#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }
statusInstalled=$(green "[ installed ]")
statuSuccess=$(green "[ OK ]")
statusFailed=$(red "[ failed ]")
statusGOOD=$(green "✓")
statusBAD=$(red "✕")
export DEBIAN_FRONTEND=noninteractive
branch="main"
yq_version="3.4.1"
ttyd_version="1.6.1"
de_gwd_nginx="1.19.4"



mirrorSite="https://gwd.seso.icu:10284"
installCMD="bash <(wget --no-check-certificate -qO- $mirrorSite/client_do)"

tcpTime(){ date -s "$(wget -qSO- --max-redirect=0 baidu.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"; }

aptLocal="mirrors.aliyun.com"



preDownload() {
systemctl stop iptables-proxy >/dev/null 2>&1
systemctl stop vtrui >/dev/null 2>&1
systemctl stop v2dns >/dev/null 2>&1
systemctl stop AdGuardHome >/dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF >/etc/resolv.conf
nameserver 119.29.29.29
nameserver 119.28.28.28
nameserver 114.114.114.114
nameserver 114.114.115.115
EOF

tcpTime && hwclock -w

if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate -c -O ~/vtrui.zip $mirrorSite/amd64_vtrui.zip
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate -c -O ~/vtrui.zip $mirrorSite/arm64_vtrui.zip
fi

wget --no-check-certificate -c -O ~/china https://bgp.space/china.html
}



preUpdate(){
if [[ -f "/usr/local/bin/0conf" ]]; then
  if [[ -n $(jq -r '.v2nodeForUpdate.address' /usr/local/bin/0conf 2>/dev/null) ]]; then
  domain=$(jq -r '.v2nodeForUpdate.address' /usr/local/bin/0conf)
  port=$(jq -r '.v2nodeForUpdate.port' /usr/local/bin/0conf)
  v2path=$(jq -r '.v2nodeForUpdate.path' /usr/local/bin/0conf)
  uuidnum=$(jq -r '.v2nodeForUpdate.uuid' /usr/local/bin/0conf)

  jq 'del(.v2nodeForUpdate)' /usr/local/bin/0conf |\
  jq --arg domain "$domain" '.v2nodeForUpdate[0].address=$domain' |\
  jq --arg port "$port" '.v2nodeForUpdate[0].port=$port' |\
  jq --arg uuidnum "$uuidnum" '.v2nodeForUpdate[0].uuid=$uuidnum' |\
  jq --arg v2path "$v2path" '.v2nodeForUpdate[0].path=$v2path' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
  fi

  if [[ $(jq -r '.dns.doh1' /usr/local/bin/0conf) = "null" ]]; then
  doh1=$(jq -r '.doh.doh1' /usr/local/bin/0conf)
  doh2=$(jq -r '.doh.doh2' /usr/local/bin/0conf)
  hosts=$(jq -r '.hosts' /usr/local/bin/0conf)
  DNSsplit=$(jq -r '.splitDNS' /usr/local/bin/0conf)

  jq 'del(.doh)' /usr/local/bin/0conf |\
  jq 'del(.hosts)' |\
  jq 'del(.v2ad)' |\
  jq 'del(.splitDNS)' |\
  jq 'del(.pihole)' |\
  jq --arg doh1 "$doh1" '.dns.doh1=$doh1' |\
  jq --arg doh2 "$doh2" '.dns.doh2=$doh2' |\
  jq --argjson hosts "$hosts" '.dns.hosts=$hosts' |\
  jq --arg DNSsplit "$DNSsplit" '.dns.DNSsplit=$DNSsplit' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
  fi

  if [[ $(awk '/divertLan/ {print;exit}' /usr/local/bin/0conf) =~ "[" ]]; then
  jq '.divertLan={}' /usr/local/bin/0conf |\
  jq '.divertLan.display="none"' |\
  jq '.divertLan.ip=[]' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
  fi

  if [[ $(jq -r '.address.pihole' /usr/local/bin/0conf 2>/dev/null) != "null" ]]; then
  pwd=$(jq -r '.address.pihole' /usr/local/bin/0conf)
  jq 'del(.address.pihole)' /usr/local/bin/0conf |\
  jq --arg pwd "$pwd" '.address.PWD=$pwd' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
  fi
fi

mkdir -p /opt/de_GWD
if [[ -d /usr/local/bin/frp ]]; then
mv -f /usr/local/bin/frp /opt/de_GWD/frp
fi

if [[ -n $(cat /usr/local/bin/0conf 2>/dev/null) ]]; then
mv -f /usr/local/bin/0conf /opt/de_GWD/0conf
mv -f /usr/local/bin/0conf_bak /opt/de_GWD/0conf_bak
fi

rm -rf /usr/local/bin/0conf*
rm -rf /usr/local/bin/chnrouteSET
rm -rf /usr/local/bin/doh*
rm -rf /usr/local/bin/IP*
rm -rf /usr/local/bin/listW*
rm -rf /usr/local/bin/listB*
rm -rf /usr/local/bin/iptables*
rm -rf /usr/local/bin/ui*
rm -rf /usr/local/bin/v2dns
rm -rf /usr/local/bin/vtrui*

if [[ -f "/etc/dnsmasq.conf" ]]; then
cat << EOF >/etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=5311
EOF
pihole restartdns >/dev/null 2>&1
fi

if [[ -d "/etc/pihole" ]] && [[ $(systemctl is-active v2dns) = "active" ]]; then
pihole -a disabledhcp

usermod -G www-data www-data
killall -u pihole >/dev/null 2>&1
deluser --remove-home pihole >/dev/null 2>&1
groupdel pihole >/dev/null 2>&1

/opt/pihole/uninstall.sh << EOF
y
n
EOF

rm -rf /usr/local/bin/pihole*
rm -rf /etc/dnsmasq*

rm -rf /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin

apt purge php7.4-cgi php7.4-xml php7.4-intl php7.4-sqlite3 sqlite3 lighttpd dhcpcd5
fi


systemctl disable --now doh-client >/dev/null 2>&1
rm -rf /lib/systemd/system/doh-client.service
rm -rf /opt/de_GWD/doh-client*
rm -rf "/etc/NetworkManager/dispatcher.d"
systemctl daemon-reload


if [[ -f "/usr/bin/dockerd" ]]; then
docker stop nginx >/dev/null 2>&1
docker rm nginx >/dev/null 2>&1

docker image ls 2>/dev/null | awk '/nginx/{print$3}' | while read line
do
docker rmi $line 2>/dev/null 
done

if [[ -z $(docker image ls 2>/dev/null | awk '/nginx/{print$3}') ]]; then
  systemctl disable --now docker >/dev/null 2>&1
  apt purge docker-ce docker-ce-cli containerd.io >/dev/null 2>&1
fi
fi


rm -rf /opt/de_GWD/chnrouteset
rm -rf /opt/de_GWD/chnroute.txt
rm -rf /opt/de_GWD/Q4am
rm -rf /opt/de_GWD/Q4H
rm -rf /opt/de_GWD/Q2H
rm -rf /etc/dns-over-https
rm -rf /usr/bin/vtrui
rm -rf /etc/vtrui
rm -rf /opt/de_GWD/v2dns
rm -rf /opt/de_GWD/vtrui
rm -rf /opt/de_GWD/ttyd
rm -rf /opt/de_GWD/__MACOSX
rm -rf /var/www/html/__MACOSX
rm -rf /lib/systemd/system/ttyd.service
systemctl daemon-reload >/dev/null 2>&1

rm -rf /var/www/html/gwd
jq 'del(.clifwd)' /opt/de_GWD/0conf |\
jq 'del(.dns.v2ad)' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /opt/de_GWD/0conf
mv -f /var/www/ssl/*.cer /var/www/ssl/de_GWD.cer >/dev/null 2>&1
mv -f /var/www/ssl/*.key /var/www/ssl/de_GWD.key >/dev/null 2>&1

crontab -l > ~/now.cron
sed -i '/\/usr\/local\/bin\/.*/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron



cd ~
source /etc/profile
service cron stop >/dev/null 2>&1

doh1=$(jq -r '.dns.doh1' /opt/de_GWD/0conf)
doh2=$(jq -r '.dns.doh2' /opt/de_GWD/0conf)

domain=$(jq -r '.v2nodeForUpdate[0].address' /opt/de_GWD/0conf)
port=$(jq -r '.v2nodeForUpdate[0].port' /opt/de_GWD/0conf)
v2path=$(jq -r '.v2nodeForUpdate[0].path' /opt/de_GWD/0conf)
uuidnum=$(jq -r '.v2nodeForUpdate[0].uuid' /opt/de_GWD/0conf)

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

if [[ -z $domain ]] || [[ -z $v2path ]] || [[ -z $uuidnum ]]; then
  red "de_GWD /opt/de_GWD/0conf is missing"
  exit
fi
}



installKernel(){
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate -c --tries=10 https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-headers-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb
wget --no-check-certificate -c --tries=10 https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-image-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb

if [[ $(ls -l ~/bbrkernel/linux-headers-*.deb | awk '{print$5}') -gt 7665000 ]] && [[ $(ls -l ~/bbrkernel/linux-image-*.deb | awk '{print$5}') -gt 45981000 ]]; then
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

dpkg --list | grep linux-image | awk '{print $2}' | sed '/5.7.7/d' | sed '/5.6.15/d' | while read line
do
apt purge -y $line
done

update-grub

cat << EOF >~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = cake" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
sysctl -p
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
systemctl restart sshd
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

echo "Kernel updated, please reboot." >~/bbrkernel/reboot
else
    red "Kernel download failed"
fi
}



de_GWDconnect(){
$(curl -Is  http://www.google.com/ncr | head -n 1) >/dev/null 2>&1
echo ""
if [[ $(curl -Is  http://www.google.com/ncr | head -n 1) =~ "HTTP" ]]; then
    echo "$statuSuccess de_GWD server connect"
    echo "$statuSuccess de_GWD server connect"
    echo "$statuSuccess de_GWD server connect"
else
    echo "$statusFailed de_GWD server connect"
    echo "$statusFailed de_GWD server connect"
    echo "$statusFailed de_GWD server connect"

cat << EOF >/etc/resolv.conf
nameserver 119.29.29.29
nameserver 119.28.28.28
nameserver 114.114.114.114
nameserver 114.114.115.115
EOF

    exit
fi
echo ""
}



preInstall(){
cat << EOF >/etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF >/etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

apt update
apt install sudo locales net-tools dnsutils ipset wget curl git jq bc haveged unzip ca-certificates apt-transport-https gnupg2 resolvconf smartdns
source /etc/profile
systemctl enable --now haveged >/dev/null 2>&1

systemctl mask --now systemd-resolved >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen

cat << EOF >/etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF

locale-gen en_US.UTF-8

echo "Asia/Shanghai" > /etc/timezone
ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
}



preConf(){
cat << EOF >/etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 64000
* hard nproc 64000
EOF

echo "ulimit -n 1000000" > ~/.bash_profile

cat << EOF >/etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 2
net.unix.max_dgram_qlen = 1024
net.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 5
fs.file-max = 1000000
fs.inotify.max_user_instances = 819200
fs.inotify.max_queued_events = 32000
fs.inotify.max_user_watches = 64000
net.core.netdev_max_backlog = 250000
net.core.optmem_max = 4194304
net.core.rmem_max = 4194304
net.core.rmem_default = 4194304
net.core.wmem_max = 4194304
net.core.wmem_default = 4194304
net.core.somaxconn = 65535
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_orphan_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 65536 4194304
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_slow_start_after_idle = 0
EOF

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf

if [[ $(uname -r) =~ "bbrplus" ]]; then
  echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
else
  echo "net.core.default_qdisc = cake" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi
sysctl -p

mkdir -p /opt/de_GWD
}



SmartDNSset(){
doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)

doh1IP=$(nslookup $doh1Domain | awk '/Address/ {print$2}' | sed '1d' | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')
doh2IP=$(nslookup $doh2Domain | awk '/Address/ {print$2}' | sed '1d' | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')

rm -rf /etc/smartdns/*.conf
cat << EOF >/etc/smartdns/smartdns.conf
bind 127.0.0.1:5310
bind-tcp 127.0.0.1:5310

speed-check-mode        tcp:443,ping
cache-size              0
rr-ttl                  600
rr-ttl-min              60
rr-ttl-max              43200
force-AAAA-SOA          yes
prefetch-domain         yes
serve-expired           yes
serve-expired-ttl       0
serve-expired-reply-ttl 30

server 114.114.114.114
server 114.114.115.115
server 119.29.29.29
server 119.28.28.28
server 223.5.5.5
server 223.6.6.6
EOF

systemctl restart smartdns
echo "$statusInstalled smartdns"
}



installV2ray(){
systemctl disable --now v2dns >/dev/null 2>&1
systemctl disable --now vtrui >/dev/null 2>&1
mkdir -p /opt/de_GWD/v2dns
mkdir -p /opt/de_GWD/vtrui

rm -rf ~/vtrui
unzip ~/vtrui.zip -d ~/vtrui
cp -f ~/vtrui/v2ray /opt/de_GWD/v2dns/v2dns
cp -f ~/vtrui/v2ctl /opt/de_GWD/v2dns/v2ctl
cp -f ~/vtrui/v2ray /opt/de_GWD/vtrui/vtrui
cp -f ~/vtrui/v2ctl /opt/de_GWD/vtrui/v2ctl
cp -f ~/vtrui/geoip.dat /opt/de_GWD/vtrui/geoip.dat
chmod +x /opt/de_GWD/v2dns/v2dns
chmod +x /opt/de_GWD/v2dns/v2ctl
chmod +x /opt/de_GWD/vtrui/vtrui
chmod +x /opt/de_GWD/vtrui/v2ctl

cat << EOF >/opt/de_GWD/v2dns/config.json
{
"dns":{
  "hosts":{"localhost":"127.0.0.1"},
  "servers":["https+local://$doh1","https+local://$doh2"]
},
"inbounds":[
  {
    "tag":"dnsin",
    "port":53,
    "protocol":"dokodemo-door",
    "settings":{"network":"tcp,udp","address":"0.0.0.0","port":53}
  }
],
"outbounds":[
  {
    "tag":"dnsout",
    "protocol":"dns",
    "settings":{},
    "streamSettings":{"sockopt":{"mark":255}}
  }
],
"routing":{
  "domainStrategy":"AsIs",
  "rules":[
    {"outboundTag":"dnsout","type":"field","inboundTag":["dnsin"]}
  ]
}
}
EOF

domainIP=$(dig @127.0.0.1 $domain -p 5310 +short | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' | awk NR==1)

jq --arg key "$doh1Domain" --arg value "$doh1IP" '.dns.hosts += {($key): ($value)}' /opt/de_GWD/v2dns/config.json |\
jq --arg key "$doh2Domain" --arg value "$doh2IP" '.dns.hosts += {($key): ($value)}' |\
jq --arg key "$domain" --arg value "$domainIP" '.dns.hosts += {($key): ($value)}' >/tmp/v2dns_temp && mv -f /tmp/v2dns_temp /opt/de_GWD/v2dns/config.json

cat << EOF > /lib/systemd/system/v2dns.service
[Unit]
Description=v2dns Service
After=network.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
ExecStart=/opt/de_GWD/v2dns/v2dns -config /opt/de_GWD/v2dns/config.json
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable v2dns
systemctl restart v2dns

cat << EOF >/opt/de_GWD/vtrui/config.json
{
"dns":{"servers":["localhost"]},
"inbounds":[
  {
    "port":9896,
    "listen":"127.0.0.1",
    "protocol":"dokodemo-door",
    "settings":{"auth":"noauth","network":"tcp,udp","followRedirect":true},
    "streamSettings":{"sockopt":{"tproxy":"tproxy"}}
  }
],
"outbounds":[
  {
    "protocol":"vmess",
    "settings":{"vnext":[{
          "address":"xxxx.ooo",
          "port":443,
          "users":[
            {
              "id":"00000000-0000-0000-0000-000000000000",
              "security": "auto",
              "level": 1
            }
          ]
        }
      ]
    },
    "streamSettings":{
      "network":"ws",
      "wsSettings":{
        "path":"/000000"
      },
      "security":"tls",
      "tlsSettings":{
        "serverName":"xxxx.ooo",
        "allowInsecure":false
      },
      "sockopt":{"mark":255}
    }
  },
  {
    "tag":"Direct",
    "protocol":"freedom",
    "settings":{},
    "streamSettings":{
      "sockopt":{"mark":255}
      }
  }
],
"routing":{
  "domainStrategy":"AsIs",
  "rules":[
    {"outboundTag":"Direct","type":"field","ip":["geoip:cn","geoip:private"]}
  ]
}
}
EOF

jq --arg domain "$domain" '.outbounds[0].settings.vnext[0].address=$domain' /opt/de_GWD/vtrui/config.json |\
jq --argjson port "$port" '.outbounds[0].settings.vnext[0].port=$port' |\
jq --arg v2path "$v2path" '.outbounds[0].streamSettings.wsSettings.path=$v2path' |\
jq --arg uuidnum "$uuidnum" '.outbounds[0].settings.vnext[0].users[0].id=$uuidnum' |\
jq --arg domain "$domain" '.outbounds[0].streamSettings.tlsSettings.serverName=$domain' >/tmp/vtrui_temp && mv -f /tmp/vtrui_temp /opt/de_GWD/vtrui/config.json

cat << EOF > /lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target nss-lookup.target
Wants=network-online.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
ExecStart=/opt/de_GWD/vtrui/vtrui -config /opt/de_GWD/vtrui/config.json
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable vtrui
systemctl restart vtrui

rm -rf ~/vtrui

echo "$statusInstalled v2dns && vtrui"
}



installIptablesProxy(){
touch /opt/de_GWD/IPdoh
touch /opt/de_GWD/IPv2node
touch /opt/de_GWD/IPlistB
touch /opt/de_GWD/IPlistW
touch /opt/de_GWD/IPlistBlan
touch /opt/de_GWD/IPlistWlan

echo $doh1IP > /opt/de_GWD/IPdoh
echo $doh2IP >> /opt/de_GWD/IPdoh
echo $domainIP > /opt/de_GWD/IPv2node

mv -f ~/china /opt/de_GWD/chnrouteSET
sed -i '1,/BEGIN/d' /opt/de_GWD/chnrouteSET
sed -i '/END/,$d' /opt/de_GWD/chnrouteSET
sed -i 's/<br>//g' /opt/de_GWD/chnrouteSET
sed -i 's/^/add chnroute &/g' /opt/de_GWD/chnrouteSET
sed -i '1i\create chnroute hash:net family inet hashsize 2048 maxelem 65535' /opt/de_GWD/chnrouteSET

cat << EOF >/opt/de_GWD/iptables-proxy-up
#!/bin/bash
ipset -X chnroute >/dev/null 2>&1
ipset -X lanip >/dev/null 2>&1
ipset -X doh >/dev/null 2>&1
ipset -X v2node >/dev/null 2>&1
ipset -X listB >/dev/null 2>&1
ipset -X listW >/dev/null 2>&1
ipset -X listBlan >/dev/null 2>&1
ipset -X listWlan >/dev/null 2>&1

lanip="0.0.0.0/8 \
100.64.0.0/10 \
127.0.0.0/8 \
169.254.0.0/16 \
10.0.0.0/8 \
172.16.0.0/12 \
192.168.0.0/16 \
255.255.255.255/32 \
114.114.114.114/32 \
114.114.115.115/32 \
119.29.29.29/32 \
119.28.28.28/32 \
223.5.5.5/32 \
223.6.6.6/32"

ipset -R < /opt/de_GWD/chnrouteSET

ipset -N lanip hash:net family inet hashsize 2048 maxelem 65535
for iplanip in \$lanip; do
  ipset add lanip \$iplanip
done

ipset -N doh hash:ip family inet
for IPdoh in \$(cat /opt/de_GWD/IPdoh); do
  ipset add doh \$IPdoh
done

ipset -N v2node hash:ip family inet
for IPv2node in \$(cat /opt/de_GWD/IPv2node); do
  ipset add v2node \$IPv2node
done

ipset -N listB hash:ip family inet
if [[ -n \$(cat /opt/de_GWD/IPlistB) ]]; then
  for iplistB in \$(cat /opt/de_GWD/IPlistB); do
    ipset add listB \$iplistB
  done
fi

ipset -N listW hash:ip family inet
if [[ -n \$(cat /opt/de_GWD/IPlistW) ]]; then
  for iplistW in \$(cat /opt/de_GWD/IPlistW); do
    ipset add listW \$iplistW
  done
fi

ipset -N listBlan hash:net family inet
if [[ -n \$(cat /opt/de_GWD/IPlistBlan) ]]; then
  for iplistBlan in \$(cat /opt/de_GWD/IPlistBlan); do
    ipset add listBlan \$iplistBlan
  done
fi

ipset -N listWlan hash:net family inet
if [[ -n \$(cat /opt/de_GWD/IPlistWlan) ]]; then
  for iplistWlan in \$(cat /opt/de_GWD/IPlistWlan); do
    ipset add listWlan \$iplistWlan
  done
fi

ip rule add fwmark 0x9 table 100 pref 100
ip route add local 0.0.0.0/0 dev lo table 100

iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,URG URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,FIN FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,PSH PSH -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL ALL -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

iptables -A INPUT -p tcp --dport 5350 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5350 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5310 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5310 -i $ethernetnum -j DROP

iptables -t mangle -N V2PROXY
iptables -t mangle -A V2PROXY -p tcp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5350 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5350 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5310 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5310 -j ACCEPT

iptables -t mangle -A V2PROXY -m set --match-set doh dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set v2node dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listBlan src -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set listWlan src -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set lanip dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listB dst -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set listW dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set chnroute dst -j ACCEPT
iptables -t mangle -A V2PROXY -m mark --mark 0xff -j ACCEPT

iptables -t mangle -A V2PROXY -p tcp -j MARK --set-mark 0x9

iptables -t mangle -A OUTPUT -p tcp -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -m mark ! --mark 0x9 -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9

if [[ \$(ip --oneline link show up | grep -v lo | awk '{print\$2}') =~ "wg0" ]]; then
iptables -I FORWARD -i wg0 -j ACCEPT
iptables -I FORWARD -o wg0 -j ACCEPT
iptables -t nat -I POSTROUTING -s 172.16.66.0/24 -o $ethernetnum -j MASQUERADE
fi
EOF

chmod +x /opt/de_GWD/iptables-proxy-up

cat << EOF >/opt/de_GWD/iptables-proxy-down
#!/bin/bash
iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -F
iptables -X

ipset -F chnroute >/dev/null 2>&1
ipset -F lanip >/dev/null 2>&1
ipset -F doh >/dev/null 2>&1
ipset -F v2node >/dev/null 2>&1
ipset -F listB >/dev/null 2>&1
ipset -F listW >/dev/null 2>&1
ipset -F listBlan >/dev/null 2>&1
ipset -F listWlan >/dev/null 2>&1

ip route flush table 100
ip rule del fwmark 0x9
EOF

chmod +x /opt/de_GWD/iptables-proxy-down

cat << EOF >/lib/systemd/system/iptables-proxy.service
[Unit]
Description=iptables-proxy

[Service]
User=root
Type=oneshot
RemainAfterExit=yes
ExecStart=/bin/bash /opt/de_GWD/iptables-proxy-up
ExecStop=/bin/bash /opt/de_GWD/iptables-proxy-down

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable iptables-proxy

rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
cat /dev/null > /etc/resolvconf/resolv.conf.d/head
cat /dev/null > /etc/resolvconf/resolv.conf.d/original
cat /dev/null > /etc/resolvconf/resolv.conf.d/tail
echo "nameserver 127.0.0.1" > /etc/resolvconf/resolv.conf.d/base
ln -fs /etc/resolvconf/run/resolv.conf /etc/resolv.conf
resolvconf -u

systemctl restart iptables-proxy
echo "$statusInstalled iptables-proxy"
}



installDep(){
if [[ `dpkg -l | grep php | awk '{print $2}' | grep fpm` != "php7.4-fpm" ]]; then
rm -rf /etc/php/7.3/
apt purge `dpkg -l | grep php7.3 | awk '{print $2}' | tr "\n" " "`
fi

if [[ -d "/etc/pihole" ]]; then
yes | pihole uninstall
fi

if [[ $(uname -m) == "x86_64" ]];then

cat << EOF >/etc/apt/sources.list
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main contrib non-free
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-updates main contrib non-free
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-backports main contrib non-free
deb http://deb.debian.org/debian-security $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)/updates main contrib non-free
EOF

fi

echo "deb https://packages.sury.org/php/ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main" > /etc/apt/sources.list.d/php.list
curl -fsSL https://packages.sury.org/php/apt.gpg | apt-key add -

apt update
apt upgrade && apt autoremove && apt autoclean

sed -i "/www-data/d" /etc/sudoers
sed -i "/Allow members of group sudo to execute any command/a\www-data ALL=(root)  NOPASSWD:ALL" /etc/sudoers

apt install php7.4-fpm php7.4-opcache php7.4-json moreutils apache2-utils iputils-ping

cat << EOF >/etc/php/7.4/fpm/php-fpm.conf
[global]
pid = /run/php/php-fpm.pid
error_log = /var/log/php-fpm.log

include=/etc/php/7.4/fpm/pool.d/*.conf
EOF

cat << EOF >/etc/php/7.4/fpm/pool.d/www.conf
[www]
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
listen = /run/php/php-fpm.sock

pm = dynamic
pm.max_children = 50
pm.start_servers = 12
pm.min_spare_servers = 12
pm.max_spare_servers = 24
pm.max_requests = 1000

env[HOSTNAME] = \$HOSTNAME
env[PATH] = /opt/de_GWD:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
php_value[upload_max_filesize] = 1G
php_value[post_max_size] = 1G
php_admin_value[memory_limit] = 512M
EOF

sed -i "/engine =/c\engine = off" /etc/php/7.4/fpm/php.ini
sed -i "/disable_functions =/c\disable_functions =" /etc/php/7.4/fpm/php.ini
sed -i "/^upload_max_filesize/c\upload_max_filesize = 1G" /etc/php/7.4/fpm/php.ini
sed -i "/^post_max_size/c\post_max_size = 1G" /etc/php/7.4/fpm/php.ini
sed -i "/^max_input_time/c\max_input_time = 3600" /etc/php/7.4/fpm/php.ini
sed -i "/^max_execution_time/c\max_execution_time = 3600" /etc/php/7.4/fpm/php.ini
sed -i "/^memory_limit/c\memory_limit = 512m" /etc/php/7.4/fpm/php.ini
sed -i "s/^zend_extension/;&/" /etc/php/7.4/fpm/php.ini
sed -i "s/^opcache/;&/" /etc/php/7.4/fpm/php.ini

cat << EOF >/etc/php/7.4/mods-available/opcache.ini
; configuration for php opcache module
; priority=10
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=10000
opcache.revalidate_freq=1
opcache.fast_shutdown=1
opcache.save_comments=1
EOF

cat << "EOF" > /lib/systemd/system/php7.4-fpm.service
[Unit]
Description=The PHP 7.4 FastCGI Process Manager
After=network.target

[Service]
Type=notify
PIDFile=/run/php/php-fpm.pid
ExecStart=/usr/sbin/php-fpm7.4 --nodaemonize --fpm-config /etc/php/7.4/fpm/php-fpm.conf
ExecReload=/bin/kill -USR2 $MAINPID
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
systemctl enable php7.4-fpm
systemctl restart php7.4-fpm

echo "$statusInstalled dependencies"
}



installNginx(){
mkdir -p /etc/nginx
mkdir -p /var/www/html
mkdir -p /var/www/ssl
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/scgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp

if [[ $(uname -m) == "x86_64" ]];then
if [[ $(nginx -v 2>&1 | grep -o '[0-9.]*$') != $de_gwd_nginx ]] || [[ $(systemctl is-active nginx) != "active" ]]; then

rm -rf ~/nginx*
wget --no-check-certificate -c -O ~/nginx.zip https://github.com/jacyl4/de_GWD-nginx/releases/download/$de_gwd_nginx/nginx.zip
unzip ~/nginx.zip -d ~/
mv -f ~/nginx/nginx_amd64 /usr/sbin/nginx
chmod +x /usr/sbin/nginx
mv -f ~/nginx/conf/* /etc/nginx/
mkdir -p "/etc/nginx/conf.d/"
rm -rf ~/nginx*

cat > /lib/systemd/system/nginx.service << "EOF"
[Unit]
Description=The NGINX http and reverse proxy server
After=network.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'
ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl restart nginx
fi
elif [[ $(uname -m) == "aarch64" ]];then
  apt install nginx
fi
}



nginxSet(){
if [[ $(ls -A "/var/www/ssl" | wc -w) == "0" ]]; then
cd /var/www/ssl
openssl req -x509 -nodes -days 3650 \
  -subj "/C=CA/ST=QC/O=Company, Inc./CN=localhost.com" \
  -config <(cat /etc/ssl/openssl.cnf \
    <(printf '[SAN]\nsubjectAltName=DNS:localhost')) \
  -newkey rsa:2048 \
  -keyout de_GWD.key \
  -out de_GWD.cer
fi

rm -rf /etc/nginx/nginx.conf
cat << EOF >/etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  100000;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 64 4k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;

  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;
  log_not_found off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

rm -rf /etc/nginx/conf.d/forward*.conf

touch /etc/nginx/conf.d/0_top

cat << 'EOF' >/etc/nginx/conf.d/1_serverHead
server {
        listen 80;
        return 301 https://$host$request_uri;
}

server {
  listen 443 quic reuseport;
  listen 443 ssl http2 fastopen=128 reuseport;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/de_GWD.cer;
  ssl_certificate_key /var/www/ssl/de_GWD.key;
EOF

cat << EOF >/etc/nginx/conf.d/2_tlsParameter
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  add_header alt-svc 'quic=":443"; h3-27=":443"; h3-25=":443"; h3-T050=":443"; h3-Q050=":443"; h3-Q049=":443"; h3-Q048=":443"; h3-Q046=":443"; h3-Q043=":443"; ma=86400';
  add_header Referrer-Policy                    no-referrer;
  add_header X-Content-Type-Options             nosniff;
  add_header X-Download-Options                 noopen;
  add_header X-Frame-Options                    DENY;
  add_header X-Permitted-Cross-Domain-Policies  none;
  add_header X-Robots-Tag                       none;
  add_header X-XSS-Protection                   "1; mode=block";
  add_header Strict-Transport-Security          "max-age=63072000" always;

EOF

touch /etc/nginx/conf.d/3_reverseProxy

cat << EOF >/etc/nginx/conf.d/4_end
location ~ /\.(?!well-known).* {
  deny all;
}

location ~ [^/]\.php(/|$) {
  fastcgi_pass unix:/run/php/php-fpm.sock;
  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
  fastcgi_index index.php;
  include fastcgi_params;
}

location /adg/ {
  proxy_pass http://127.0.0.1:8080/;
  proxy_redirect / /adg/;
  proxy_cookie_path / /adg/;
}

location ~ ^/ttyd(.*)$ {
  proxy_http_version 1.1;
  proxy_set_header Host \$host;
  proxy_set_header X-Forwarded-Proto \$scheme;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
  proxy_pass http://127.0.0.1:3000/\$1;
}
}
EOF

cat << "EOF" >/etc/nginx/conf.d/merge.sh
#!/bin/bash
rm -rf /etc/nginx/conf.d/default.conf

cat /etc/nginx/conf.d/0_top > /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/1_serverHead >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/2_tlsParameter >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/3_reverseProxy >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/4_end >> /etc/nginx/conf.d/default.conf

if [[ $(uname -m) == "aarch64" ]];then
    sed -i '/ssl_early_data/d' /etc/nginx/conf.d/default.conf
    sed -i '/quic/d' /etc/nginx/conf.d/default.conf
fi

systemctl reload nginx
EOF

chmod +x /etc/nginx/conf.d/merge.sh
/etc/nginx/conf.d/merge.sh >/dev/null 2>&1
}



installWebUI(){
cd ~
wget --no-check-certificate -c -O ~/ui-script.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ui-script/Archive.zip
wget --no-check-certificate -c -O ~/ui-web.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ui-web/Archive.zip

if [[ $(ls -l ~/ui-script.zip | awk '{print$5}') -gt 29000 ]] && [[ $(ls -l ~/ui-web.zip | awk '{print$5}') -gt 2625000 ]]; then
rm -rf /opt/de_GWD/ui-*
rm -rf /opt/de_GWD/ui_*
rm -rf /var/www/html/*.php
rm -rf /var/www/html/*.ico
rm -rf /var/www/html/act
rm -rf /var/www/html/vendor
rm -rf /var/www/html/css
rm -rf /var/www/html/js

unzip ~/ui-script.zip -d /opt/de_GWD
unzip ~/ui-web.zip -d /var/www/html
fi

wget --no-check-certificate -c -O /var/www/html/act/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/version.php

mkdir -p /var/www/html/restore
chown -R www-data:www-data /var/www/html
chmod -R +x /var/www/html
chmod +x /opt/de_GWD/*

systemctl reload nginx

if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate -c -O /usr/bin/ttyd https://github.com/tsl0922/ttyd/releases/download/$ttyd_version/ttyd_linux.x86_64
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate -c -O /usr/bin/ttyd https://github.com/tsl0922/ttyd/releases/download/$ttyd_version/ttyd_linux.aarch64
fi
chmod +x /usr/bin/ttyd

cat << EOF >/lib/systemd/system/updateGWD.service
[Unit]
Description=ttyd
After=network.target

[Service]
User=root
Type=oneshot
ExecStart=/bin/bash /opt/de_GWD/ui-update
KillMode=process

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1

popupWindow="window.open('"http://$localaddr:3000"', 'popupWindow', 'width=800, height=600, scrollbars=yes');"
sed -i "/popupWindow/c\\$popupWindow" /var/www/html/update.php

rm -rf ~/ui-script
rm -rf ~/ui-web

if [[ $(ls -l /var/www/html/spt 2>/dev/null | awk '{print$5}') != "104857600" ]]; then
  dd if=/dev/zero of=/var/www/html/spt bs=1k count=100k status=progress
fi

echo "$statusInstalled WebUI"
}



installAdG(){
if [[ $(/opt/AdGuardHome/AdGuardHome --version 2>/dev/null | awk '{print$4}' | sed 's/.$//') != $(curl --silent "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | jq -r .tag_name | sed 's/^.//') ]]; then
  rm -rf /opt/AdGuardHome
  rm -rf /etc/systemd/system/AdGuardHome.service

  curl -sSL https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh
fi

if [[ ! -f /opt/AdGuardHome/AdGuardHome.yaml ]]; then
cat << EOF >/opt/AdGuardHome/AdGuardHome.yaml
bind_host:
bind_port:
users:
http_proxy: ""
language: ""
rlimit_nofile: 0
debug_pprof: false
web_session_ttl: 720
dns:
  bind_host: 0.0.0.0
  port: 53
  statistics_interval: 7
  querylog_enabled: true
  querylog_file_enabled: true
  querylog_interval: 90
  querylog_size_memory: 1000
  anonymize_client_ip: false
  protection_enabled: true
  blocking_mode: default
  blocking_ipv4: ""
  blocking_ipv6: ""
  blocked_response_ttl: 10
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  ratelimit: 0
  ratelimit_whitelist: []
  refuse_any: true
  upstream_dns:
  - 127.0.0.1:5350
  bootstrap_dns:
  - 127.0.0.1:5350
  all_servers: false
  fastest_addr: false
  allowed_clients: []
  disallowed_clients: []
  blocked_hosts: []
  cache_size: 4194304
  cache_ttl_min: 0
  cache_ttl_max: 0
  bogus_nxdomain: []
  aaaa_disabled: true
  enable_dnssec: false
  edns_client_subnet: false
  filtering_enabled: true
  filters_update_interval: 24
  parental_enabled: false
  safesearch_enabled: false
  safebrowsing_enabled: false
  safebrowsing_cache_size: 1048576
  safesearch_cache_size: 1048576
  parental_cache_size: 1048576
  cache_time: 30
  rewrites: []
  blocked_services: []
tls:
filters:
- enabled: false
  url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
  name: AdGuard DNS filter
  id: 1
- enabled: false
  url: https://easylist.to/easylist/easyprivacy.txt
  name: EasyPrivacy
  id: 2
- enabled: false
  url: https://easylist.to/easylist/easylist.txt
  name: EasyList
  id: 3
- enabled: false
  url: https://easylist-downloads.adblockplus.org/easylistchina.txt
  name: EasyList China
  id: 4
- enabled: false
  url: https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjxlist.txt
  name: CJX's EasyList Lite
  id: 5
- enabled: false
  url: https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjx-annoyance.txt
  name: CJX’s Annoyance List
  id: 6
- enabled: false
  url: https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext
  name: Peter Lowe’s Ad and tracking server list
  id: 7
- enabled: false
  url: https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
  name: StevenBlack
  id: 8
- enabled: false
  url: https://anti-ad.net/easylist.txt
  name: 'CHN: anti-AD'
  id: 9
- enabled: false
  url: https://raw.githubusercontent.com/jdlingyu/ad-wars/master/hosts
  name: 大圣净化
  id: 10
whitelist_filters: []
user_rules:
dhcp:
clients: []
EOF
fi
}



AdGset(){
if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate -c -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$yq_version/yq_linux_amd64
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate -c -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/$yq_version/yq_linux_arm64
fi
chmod +x /usr/bin/yq

yq w -i /opt/AdGuardHome/AdGuardHome.yaml bind_host "127.0.0.1"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml bind_port "8080"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml rlimit_nofile "100000"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.bind_host "0.0.0.0"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.bind_port "53"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.ratelimit "0"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.upstream_dns ""
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.upstream_dns[0] "127.0.0.1:5350"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.bootstrap_dns ""
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.bootstrap_dns[0] "127.0.0.1:5350"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.all_servers "true"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.aaaa_disabled "true"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.enable_dnssec "false"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml dns.edns_client_subnet "false"

echo "$statusInstalled AdGuardHome"
}



postInstall(){
if [[ -z $(dpkg -l moreutils 2>/dev/null) ]]; then
  apt install moreutils
fi

/opt/de_GWD/ui_2h

if [[ $(uname -m) == "x86_64" ]] && [[ -z $(dpkg --list | grep linux-image | awk '/bbrplus/') ]] && [[ $(dpkg --list | grep linux-image | awk '{print $2}') != "linux-image-5.7.7" ]] && [[ $(dpkg --list | grep linux-image | awk '{print $2}') != "linux-image-5.6.15" ]]; then
  installKernel
fi

/opt/de_GWD/ui_am4

if [[ $(jq -r '.address.udp' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-onUDP >/dev/null 2>&1
else
  /opt/de_GWD/ui-offUDP >/dev/null 2>&1
fi

if [[ $(jq -r '.address.alias' /opt/de_GWD/0conf) != "null" ]]; then
  /opt/de_GWD/ui-markThis >/dev/null 2>&1
fi

/opt/de_GWD/ui-saveDNSChina >/dev/null 2>&1

/opt/de_GWD/ui_4h
systemctl restart smartdns
systemctl restart v2dns

if [[ $(jq -r '.address.dhcp' /opt/de_GWD/0conf 2>/dev/null) == "on" ]]; then
/opt/de_GWD/ui-onDHCP >/dev/null 2>&1
else
systemctl restart AdGuardHome
fi

if [[ $(jq -r '.divertLan.display' /opt/de_GWD/0conf 2>/dev/null) = "block" ]]; then
  /opt/de_GWD/ui-NodeDTshow >/dev/null 2>&1
elif [[ $(jq -r '.divertLan.display' /opt/de_GWD/0conf 2>/dev/null) = "none" ]]; then
  /opt/de_GWD/ui-NodeDThide >/dev/null 2>&1
fi

if [[ $(jq -r '.FORWARD.FWD1.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-FWD1save
  /opt/de_GWD/ui-FWD1vtrui
  systemctl restart vtrui1
fi

if [[ $(jq -r '.FORWARD.FWD0.status' /opt/de_GWD/0conf 2>/dev/null) = "on" ]];then
  /opt/de_GWD/ui-FWD0save
  /opt/de_GWD/ui-FWD0vtrui
fi
systemctl restart vtrui
systemctl restart iptables-proxy

crontab -l > ~/now.cron
sed -i '/\/opt\/de_GWD\/ui_am4/d' ~/now.cron
sed -i '/\/opt\/de_GWD\/ui_4h/d' ~/now.cron
sed -i '/\/opt\/de_GWD\/ui_2h/d' ~/now.cron

cat << EOF >> ~/now.cron
0 4 * * * /opt/de_GWD/ui_am4
0 */4 * * * /opt/de_GWD/ui_4h
0 */2 * * * /opt/de_GWD/ui_2h
EOF

crontab ~/now.cron
rm -rf ~/now.cron
service cron restart >/dev/null 2>&1

rm -rf ~/smartdns.deb
rm -rf ~/doh.zip
rm -rf ~/vtrui.zip
rm -rf ~/ui-script.zip
rm -rf ~/ui-web.zip

echo ""
red "$(cat ~/bbrkernel/reboot 2>/dev/null)"
}



installGWD(){
    green "==========================="
    green " de_GWD local IP address"
    green "==========================="
    read localaddr

    green "==========================="
    green " Upstream route IP address"
    green "==========================="
    read gatewayaddr

    green "==========================="
    green " DoH"
    green "==========================="
    read doh1

    green "==========================="
    green " Domain"
    green "==========================="
    read v2servn

    green "==========================="
    green " Path"
    green "==========================="
    read v2path
    
    green "==========================="
    green " UUID"
    green "==========================="
    read uuidnum

cd ~

doh2=$doh1

domain=$(echo $v2servn | cut -d: -f1)
port=$(echo $v2servn | cut -d: -f2)
portCheck=$(echo $port | grep '^[0-9]\+$')
if [[ -z $portCheck ]]; then
port="443"
fi

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

cat << EOF >/etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
address $localaddr
netmask 255.255.255.0
gateway $gatewayaddr
EOF

if [[ $(uname -m) == "x86_64" ]];then
cat << EOF >/etc/apt/sources.list
deb http://$aptLocal/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main contrib non-free
deb http://$aptLocal/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-updates main contrib non-free
deb http://$aptLocal/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-backports main contrib non-free
deb http://$aptLocal/debian-security $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)/updates main contrib non-free
EOF
fi

preDownload

preInstall

preConf

SmartDNSset

installV2ray

installIptablesProxy

de_GWDconnect

installDep

installNginx

nginxSet

echo "{}" > /opt/de_GWD/0conf
jq '.address={}' /opt/de_GWD/0conf |\
jq '.dns={}' |\
jq '.dns.hosts={}' |\
jq '.v2node=[]' |\
jq '.divertLan.display="none"' |\
jq '.divertLan.ip=[]' |\
jq --arg localIP "$localaddr" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayaddr" '.address.upstreamIP=$upstreamIP' |\
jq --arg doh1 "$doh1" '.dns.doh1=$doh1' |\
jq --arg doh2 "$doh2" '.dns.doh2=$doh2' |\
jq --arg domain "$v2servn" '.v2node[0].domain=$domain' |\
jq --arg name "$v2servn" '.v2node[0].name=$name' |\
jq --arg path "$v2path" '.v2node[0].path=$path' |\
jq --arg uuid "$uuidnum" '.v2node[0].uuid=$uuid' |\
jq --arg domain "$domain" '.v2nodeForUpdate[0].address=$domain' |\
jq --arg port "$port" '.v2nodeForUpdate[0].port=$port' |\
jq --arg v2path "$v2path" '.v2nodeForUpdate[0].path=$v2path' |\
jq --arg uuidnum "$uuidnum" '.v2nodeForUpdate[0].uuid=$uuidnum' |\
jq --arg updateCMD "$installCMD" '.updateCMD=$updateCMD' | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

installWebUI

installAdG

AdGset

postInstall
blue "---------------------"
blue "Install de_GWD [done]"
blue "---------------------"
}



change_PWD(){
if [[ -z $(dpkg -l apache2-utils 2>/dev/null) ]]; then
  apt install apache2-utils
fi

    green "==========="
    green " USER"
    green "==========="
    read user

    green "==========="
    green " PASSWOED"
    green "==========="
    read pwd
    
pwdHash=$(echo -n $pwd | sha256sum | awk '{print$1}' | tr -d '\n' | sha256sum | awk '{print$1}')
pwdHashAdG=$(htpasswd -B -n -b $user $pwd | cut -d: -f2 | awk NR==1)

yq w -i /opt/AdGuardHome/AdGuardHome.yaml users[0].name "$user"
yq w -i /opt/AdGuardHome/AdGuardHome.yaml users[0].password "$pwdHashAdG"

jq --arg password "$pwdHash" '.address.PWD=$password' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf

chmod 666 /opt/de_GWD/0conf
systemctl restart AdGuardHome
blue "----------------------"
blue "Change password [done]"
blue "----------------------"
}



updateGWD(){
if [[ $(cat /etc/resolv.conf | awk '/nameserver/{print$2}') = "127.0.0.1" ]]; then
  de_GWDconnect
fi

preDownload

preUpdate

preConf

SmartDNSset

installV2ray

installIptablesProxy

de_GWDconnect

installDep

installNginx

nginxSet

installWebUI

installAdG

AdGset

postInstall
blue "--------------------"
blue "Update de_GWD [done]"
blue "--------------------"
}



start_menu(){
if [[ $(systemctl is-active AdGuardHome) = "active" ]]; then
    echo "[$statusGOOD] AdGuardHome    [working]"
elif [ ! -f "/opt/AdGuardHome/AdGuardHome" ]; then
    echo "[$statusBAD] AdGuardHome    [not installed]"
else
    echo "[$statusBAD] AdGuardHome    [start failed]"
fi

if [[ $(systemctl is-active smartdns) = "active" ]]; then
    echo "[$statusGOOD] SmartDNS       [working]"
elif [[ ! -f "/usr/sbin/smartdns" ]]; then
    echo "[$statusBAD] SmartDNS       [not Installed]"
else
    echo "[$statusBAD] SmartDNS       [start failed]"
fi

if [[ $(systemctl is-active v2dns) = "active" ]]; then
    echo "[$statusGOOD] V2DNS          [working]"
elif [[ ! -d "/opt/de_GWD/v2dns" ]]; then
    echo "[$statusBAD] V2DNS          [not Installed]"
else
    echo "[$statusBAD] V2DNS          [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY          [working]"
elif [[ ! -d "/opt/de_GWD/vtrui" ]]; then
    echo "[$statusBAD] V2RAY          [not Installed]"
else
    echo "[$statusBAD] V2RAY          [start failed]"
fi

if [[ $(systemctl is-active php7.4-fpm) = "active" ]]; then
    echo "[$statusGOOD] php7.4-FPM     [working]"
elif [ ! -f "/etc/php/7.4/fpm/php-fpm.conf" ]; then
    echo "[$statusBAD] php7.4-FPM     [not installed]"
else
    echo "[$statusBAD] php7.4-FPM     [start failed]"
fi

if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusGOOD] Nginx          [working]"
elif [[ ! -f "/usr/sbin/nginx" ]]; then
    echo "[$statusBAD] Nginx          [not installed]"
else
    echo "[$statusBAD] Nginx          [start failed]"
fi

blue "-----------------------------------------------"
blue "Kernel ：$(uname -r)"
blue "Current tcp congestion control ：$(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | cut -d' ' -f3) + $(sysctl net.core.default_qdisc 2>/dev/null | cut -d' ' -f3)"
blue "-----------------------------------------------"

    green "====================================="
    green "           CLIENT"
    green "Recommend: Debian 10 (amd64 && arm64)"
    green "Author:    JacyL4"
    green "====================================="
    echo ""
    green  "1. Install de_GWD"
    green  "2. Change de_GWD password"
    yellow "0. Update de_GWD"
    red    "CTRL+C EXIT"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    change_PWD
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu